{"version":3,"sources":["components/common/AddressItem.js","components/ContactUs.js","App.js","serviceWorker.js","index.js"],"names":["AddressItem","props","_props$title","title","_props$icon","icon","react_default","a","createElement","className","addresses","initialContact","name","email","messag","ContactUs","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onChange","e","setState","contact","objectSpread","state","defineProperty","target","value","onSubmit","preventDefault","alert","Col","xs","Row","sm","span","offset","Form","Group","Control","placeholder","required","type","as","rows","message","Button","variant","map","address","key","common_AddressItem","assign","Component","App","ContactUs_ContactUs","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8eb3ac01.chunk.js","sourcesContent":["import React from \"react\";\n\nconst AddressItem = props => {\n  const { title = \"\", icon = null } = props;\n  return (\n    <p>\n      {icon}\n      <span className=\"address\">{title}</span>\n    </p>\n  );\n};\n\nexport default AddressItem;\n","import React, { Component } from \"react\";\nimport { Row, Col, Form, Button } from \"react-bootstrap\";\nimport { AddressItem } from \"../components\";\n\nconst addresses = [\n  {\n    title: \"23, Avenue de Paris 75012 Paris\",\n    icon: <i className=\"fas fa-map-marker-alt\" />\n  },\n  {\n    title: \"hello@mikechemardin.com\",\n    icon: <i className=\"far fa-envelope\" />\n  },\n  {\n    title: \"mike.chemardin\",\n    icon: <i className=\"fab fa-skype\" />\n  },\n  {\n    title: \"+33619530144\",\n    icon: <i className=\"fas fa-mobile-alt\" />\n  }\n];\n\nconst initialContact = {\n  name: \"\",\n  email: \"\",\n  messag: \"\"\n};\nexport default class ContactUs extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      contact: { ...initialContact }\n    };\n  }\n\n  onChange = e => {\n    this.setState({\n      contact: {\n        ...this.state.contact,\n        [e.target.name]: e.target.value\n      }\n    });\n  };\n\n  onSubmit = e => {\n    e.preventDefault();\n    this.setState({\n      contact: { ...initialContact }\n    });\n    alert(\"Submitted successfuly!\");\n  };\n\n  render() {\n    return (\n      <Col xs={12}>\n        <Row className=\"main\">\n          <Col xs={8}>\n            <Row>\n              <Col xs={12} sm={{ span: 10, offset: 1 }}>\n                <Row>\n                  <Col xs={12} className=\"content\">\n                    <Row>\n                      <Col xs={6} />\n                      <Col xs={6} className=\"form\">\n                        <h3>Get in Touch</h3>\n                        <p className=\"text\">\n                          Feel free to drop us a line below!\n                        </p>\n                        <Form onSubmit={this.onSubmit}>\n                          <Form.Group>\n                            <Form.Control\n                              placeholder=\"Your name\"\n                              value={this.state.contact.name}\n                              onChange={this.onChange}\n                              name=\"name\"\n                              required\n                            />\n                          </Form.Group>\n                          <Form.Group>\n                            <Form.Control\n                              placeholder=\"Your email\"\n                              value={this.state.contact.email}\n                              onChange={this.onChange}\n                              name=\"email\"\n                              type=\"email\"\n                              required\n                            />\n                          </Form.Group>\n                          <Form.Group>\n                            <Form.Control\n                              as=\"textarea\"\n                              rows={4}\n                              placeholder=\"Type your message here\"\n                              value={this.state.contact.message}\n                              onChange={this.onChange}\n                              name=\"message\"\n                              required\n                            />\n                          </Form.Group>\n                          <Form.Group>\n                            <Button variant=\"primary\" type=\"submit\">\n                              SEND\n                            </Button>\n                          </Form.Group>\n                        </Form>\n                      </Col>\n                    </Row>\n                  </Col>\n                </Row>\n              </Col>\n              <Col xs={12} sm={5} className=\"contact-info\">\n                <Row>\n                  <Col xs={12}>\n                    <h3>Contact Us</h3>\n                    {addresses.map((address, key) => (\n                      <AddressItem key={key} {...address} />\n                    ))}\n                  </Col>\n                  <Col xs={12} className=\"social\">\n                    <i className=\"fab fa-instagram\" />\n                    <i className=\"fab fa-twitter\" />\n                    <i className=\"fab fa-linkedin\" />\n                  </Col>\n                </Row>\n              </Col>\n            </Row>\n          </Col>\n        </Row>\n      </Col>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { ContactUs } from \"./components\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <ContactUs />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}